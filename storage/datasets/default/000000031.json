{
  "url": "https://apify.com/templates/python-selenium",
  "title": "Selenium + Chrome · Template · Apify",
  "content": "![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: selenium.svg](https://apify.com/img/template-icons/selenium.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: beautifulsoup.svg](https://apify.com/img/template-icons/beautifulsoup.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: beautifulsoup.svg](https://apify.com/img/template-icons/beautifulsoup.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: playwright.svg](https://apify.com/img/template-icons/playwright.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: python.svg](https://apify.com/img/template-icons/python.svg)\n![File: scrapy.svg](https://apify.com/img/template-icons/scrapy.svg)\n![Apify logo (File: favicon.svg)](https://apify.com/img/favicon.svg)\n![GDPR image (File: GDPR_a807ac9a_ba0683f740.svg)](https://cdn-cms.apify.com/GDPR_a807ac9a_ba0683f740.svg)\n![SOC2 image (File: SOC_dc6cf5ae_f7999d700f.svg)](https://cdn-cms.apify.com/SOC_dc6cf5ae_f7999d700f.svg)\n![GetApp Apify user reviews image (File: Get_App_1f4079a540.png)](https://cdn-cms.apify.com/Get_App_1f4079a540.png)\n![Software Advice Apify reviews image (File: Softwareadvice_88026ee6c2.png)](https://cdn-cms.apify.com/Softwareadvice_88026ee6c2.png)\n![Capterra Apify user reviews image (File: Capterra_ce83db3070.png)](https://cdn-cms.apify.com/Capterra_ce83db3070.png)\n![G2 Apify user reviews image (File: G2_d80d60f2f8.png)](https://cdn-cms.apify.com/G2_d80d60f2f8.png)\n![TrustRadius Apify user reviews image (File: Trust_Radius_7ca0e0bdad.png)](https://cdn-cms.apify.com/Trust_Radius_7ca0e0bdad.png)\n![Crozdesk Apify user reviews image (File: Crozdesk_1d12ceb040.png)](https://cdn-cms.apify.com/Crozdesk_1d12ceb040.png)\n\nSkip to content\n\n[](/)\n\n[Get started](https://console.apify.com/sign-up)[Log in](https://console.apify.com/sign-in)\n\n  * Product\n\nBack\n\n[Start here!Get data with ready-made web scrapers for popular websitesBrowse 4,000+ Actors](/store)\n\nThe Apify platform\n\n    * [Apify StorePre-built web scraping tools](/store)\n    * [ActorsBuild and run serverless programs](/actors)\n    * [IntegrationsConnect with apps and services](/integrations)\n    * [StorageStore results for web scrapers](/storage)\n\nAnti-blocking\n\n    * [Anti-blockingScrape without getting blocked](/anti-blocking)\n    * [ProxyRotate scraper IP addresses](/proxy)\n\nOpen source\n\n    * [CrawleeWeb scraping and crawling library](https://crawlee.dev/)\n\n  * Solutions\n\nBack\n\nWeb data for\n\n    * [Enterprise](/enterprise)\n    * [Startups](/resources/startups)\n    * [Universities](/resources/universities)\n    * [Nonprofits](/resources/nonprofits)\n\nUse cases\n\n    * [Data for generative AI](/data-for-generative-ai)\n    * [Lead generation](/use-cases/lead-generation)\n    * [Market research](/use-cases/market-research)\n    * [Sentiment analysis](/use-cases/sentiment-analysis)\n    * [View more →](/use-cases)\n\nConsulting\n\n    * [Apify Professional Services](/professional-services)\n    * [Apify Partners](/partners)\n\n  * Developers\n\nBack\n\n    * [DocumentationFull reference for the Apify platform](https://docs.apify.com/)\n\nGet started\n\n    * [Web scraping academyCourses for beginners and experts](https://docs.apify.com/academy)\n    * [Code templatesPython, JavaScript, and TypeScript](/templates)\n    * [Deploy to ApifyWith CLI or GitHub integration](https://docs.apify.com/platform/actors/development/deployment)\n    * [Monetize your codePublish your scrapers and get paid](https://apify.com/partners/actor-developers)\n\nLearn\n\n    * [API reference](https://docs.apify.com/api)\n    * [CLI](https://docs.apify.com/cli/)\n    * [SDK](https://docs.apify.com/sdk)\n    * [Crawlee](https://crawlee.dev/)\n\n[Apify open source fair shareWe will support and reward every open-source project on Apify StoreJoin now](/partners/open-source-fair-share)\n\n  * Resources\n\nBack\n\n    * [Help and supportAdvice and answers about Apify](https://help.apify.com/en/)\n    * [Submit your ideasTell us the Actors you want](/ideas)\n    * [ChangelogSee what’s new on Apify](/change-log)\n    * [Customer storiesFind out how others use Apify](/success-stories)\n\nCompany\n\n    * [About Apify](/about)\n    * [Contact us](/contact)\n    * [Blog](https://blog.apify.com/)\n    * [Apify Partners](/partners)\n    * [Affiliate Program](/partners/affiliate)\n    * [JobsWe're hiring!](/jobs)\n\n[Join our DiscordTalk to scraping experts](https://discord.com/invite/jyEM2PRvMU)\n\n  * [Pricing](/pricing)\n\n  * [Contact sales](/contact-sales)\n\n\n\n\n[Contact sales](/contact-sales)[Log in](https://console.apify.com/sign-in)\n\n[Get started](https://console.apify.com/sign-up)\n\n[Back to template gallery](/templates)\n\n# Selenium + Chrome\n\nScraper example built with Selenium and headless Chrome browser to scrape a website and save the results to storage. A popular alternative to Playwright.\n\nLanguage\n\npython\n\nTools\n\nselenium\n\nUse cases\n\nWeb scraping\n\nFeatures\n\n[Input schema](https://docs.apify.com/platform/actors/development/actor-definition/input-schema)\n\n[Run on Apify](https://console.apify.com/actors/templates?selectedTemplate=python-selenium)Use locally\n\nsrc/main.py\n\nsrc/__main__.py\n    \n    \n    1\"\"\"This module defines the main entry point for the Apify Actor.\n    2\n    3Feel free to modify this file to suit your specific needs.\n    4\n    5To build Apify Actors, utilize the Apify SDK toolkit, read more at the official documentation:\n    6https://docs.apify.com/sdk/python\n    7\"\"\"\n    8\n    9import asyncio\n    10from urllib.parse import urljoin\n    11\n    12from apify import Actor, Request\n    13from selenium import webdriver\n    14from selenium.webdriver.chrome.options import Options as ChromeOptions\n    15from selenium.webdriver.common.by import By\n    16\n    17# To run this Actor locally, you need to have the Selenium Chromedriver installed.\n    18# Follow the installation guide at:\n    19# https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/\n    20# When running on the Apify platform, the Chromedriver is already included\n    21# in the Actor's Docker image.\n    22\n    23\n    24async def main() -> None:\n    25    \"\"\"Main entry point for the Apify Actor.\n    26\n    27    This coroutine is executed using `asyncio.run()`, so it must remain an asynchronous function for proper execution.\n    28    Asynchronous execution is required for communication with Apify platform, and it also enhances performance in\n    29    the field of web scraping significantly.\n    30    \"\"\"\n    31    # Enter the context of the Actor.\n    32    async with Actor:\n    33        # Retrieve the Actor input, and use default values if not provided.\n    34        actor_input = await Actor.get_input() or {}\n    35        start_urls = actor_input.get('start_urls', [{'url': 'https://apify.com'}])\n    36        max_depth = actor_input.get('max_depth', 1)\n    37\n    38        # Exit if no start URLs are provided.\n    39        if not start_urls:\n    40            Actor.log.info('No start URLs specified in actor input, exiting...')\n    41            await Actor.exit()\n    42\n    43        # Open the default request queue for handling URLs to be processed.\n    44        request_queue = await Actor.open_request_queue()\n    45\n    46        # Enqueue the start URLs with an initial crawl depth of 0.\n    47        for start_url in start_urls:\n    48            url = start_url.get('url')\n    49            Actor.log.info(f'Enqueuing {url} ...')\n    50            new_request = Request.from_url(url, user_data={'depth': 0})\n    51            await request_queue.add_request(new_request)\n    52\n    53        # Launch a new Selenium Chrome WebDriver and configure it.\n    54        Actor.log.info('Launching Chrome WebDriver...')\n    55        chrome_options = ChromeOptions()\n    56\n    57        if Actor.config.headless:\n    58            chrome_options.add_argument('--headless')\n    59\n    60        chrome_options.add_argument('--no-sandbox')\n    61        chrome_options.add_argument('--disable-dev-shm-usage')\n    62        driver = webdriver.Chrome(options=chrome_options)\n    63\n    64        # Test WebDriver setup by navigating to an example page.\n    65        driver.get('http://www.example.com')\n    66        if driver.title != 'Example Domain':\n    67            raise ValueError('Failed to open example page.')\n    68\n    69        # Process the URLs from the request queue.\n    70        while request := await request_queue.fetch_next_request():\n    71            url = request.url\n    72\n    73            if not isinstance(request.user_data['depth'], (str, int)):\n    74                raise TypeError('Request.depth is an enexpected type.')\n    75\n    76            depth = int(request.user_data['depth'])\n    77            Actor.log.info(f'Scraping {url} (depth={depth}) ...')\n    78\n    79            try:\n    80                # Navigate to the URL using Selenium WebDriver. Use asyncio.to_thread\n    81                # for non-blocking execution.\n    82                await asyncio.to_thread(driver.get, url)\n    83\n    84                # If the current depth is less than max_depth, find nested links\n    85                # and enqueue them.\n    86                if depth < max_depth:\n    87                    for link in driver.find_elements(By.TAG_NAME, 'a'):\n    88                        link_href = link.get_attribute('href')\n    89                        link_url = urljoin(url, link_href)\n    90\n    91                        if link_url.startswith(('http://', 'https://')):\n    92                            Actor.log.info(f'Enqueuing {link_url} ...')\n    93                            new_request = Request.from_url(\n    94                                link_url,\n    95                                user_data={'depth': depth + 1},\n    96                            )\n    97                            await request_queue.add_request(new_request)\n    98\n    99                # Extract the desired data.\n    100                data = {\n    101                    'url': url,\n    102                    'title': driver.title,\n    103                }\n    104\n    105                # Store the extracted data to the default dataset.\n    106                await Actor.push_data(data)\n    107\n    108            except Exception:\n    109                Actor.log.exception(f'Cannot extract data from {url}.')\n    110\n    111            finally:\n    112                # Mark the request as handled to ensure it is not processed again.\n    113                await request_queue.mark_request_as_handled(request)\n    114\n    115        driver.quit()\n\n## Python Selenium & Chrome template\n\nA template example built with Selenium and a headless Chrome browser to scrape a website and save the results to storage. The URL of the web page is passed in via input, which is defined by the [input schema](https://docs.apify.com/platform/actors/development/input-schema). The template uses the [Selenium WebDriver](https://www.selenium.dev/documentation/webdriver/) to load and process the page. Enqueued URLs are stored in the default [request queue](https://docs.apify.com/sdk/python/reference/class/RequestQueue). The data are then stored in the default [dataset](https://docs.apify.com/platform/storage/dataset) where you can easily access them.\n\n## Included features\n\n  * **[Apify SDK](https://docs.apify.com/sdk/python/)** for Python - a toolkit for building Apify [Actors](https://apify.com/actors) and scrapers in Python\n  * **[Input schema](https://docs.apify.com/platform/actors/development/input-schema)** \\- define and easily validate a schema for your Actor's input\n  * **[Request queue](https://docs.apify.com/sdk/python/docs/concepts/storages#working-with-request-queues)** \\- queues into which you can put the URLs you want to scrape\n  * **[Dataset](https://docs.apify.com/sdk/python/docs/concepts/storages#working-with-datasets)** \\- store structured data where each object stored has the same attributes\n  * **[Selenium](https://pypi.org/project/selenium/)** \\- a browser automation library\n\n\n\n## How it works\n\nThis code is a Python script that uses Selenium to scrape web pages and extract data from them. Here's a brief overview of how it works:\n\n  * The script reads the input data from the Actor instance, which is expected to contain a `start_urls` key with a list of URLs to scrape and a `max_depth` key with the maximum depth of nested links to follow.\n  * The script enqueues the starting URLs in the default request queue and sets their depth to 1.\n  * The script processes the requests in the queue one by one, fetching the URL using requests and parsing it using Selenium.\n  * If the depth of the current request is less than the maximum depth, the script looks for nested links in the page and enqueues their targets in the request queue with an incremented depth.\n  * The script extracts the desired data from the page (in this case, titles of each page) and pushes them to the default dataset using the `push_data` method of the Actor instance.\n  * The script catches any exceptions that occur during the [web scraping](https://apify.com/web-scraping) process and logs an error message using the `Actor.log.exception` method.\n\n\n\n## Resources\n\n  * [Selenium controlled Chrome example](https://apify.com/apify/example-selenium)\n  * [Selenium Grid: what it is and how to set it up](https://blog.apify.com/selenium-grid-what-it-is-and-how-to-set-it-up/)\n  * [Web scraping with Selenium and Python](https://blog.apify.com/web-scraping-with-selenium-and-python/)\n  * [Cypress vs. Selenium for web testing](https://blog.apify.com/cypress-vs-selenium/)\n  * [Python tutorials in Academy](https://docs.apify.com/academy/python)\n  * [Video guide on getting scraped data using Apify API](https://www.youtube.com/watch?v=ViYYDHSBAKM)\n  * A short guide on how to build web scrapers using code templates:\n\n\n\n## Related templates\n\n[**Start with Python** Scrape single page with provided URL with HTTPX and extract data from page's HTML with Beautiful Soup.](/templates/python-start)[**BeautifulSoup** Example of a web scraper that uses Python HTTPX to scrape HTML from URLs provided on input, parses it using BeautifulSoup and saves results to storage.](/templates/python-beautifulsoup)[**Playwright + Chrome** Crawler example that uses headless Chrome driven by Playwright to scrape a website. Headless browsers render JavaScript and can help when getting blocked.](/templates/python-playwright)[**Empty Python project** Empty template with basic structure for the Actor with Apify SDK that allows you to easily add your own functionality.](/templates/python-empty)[**Standby Python project** Template with basic structure for an Actor using Standby mode that allows you to easily add your own functionality.](/templates/python-standby)[**Scrapy** This example Scrapy spider scrapes page titles from URLs defined in input parameter. It shows how to use Apify SDK for Python and Scrapy pipelines to save results.](/templates/python-scrapy)\n\n## Already have a solution in mind?\n\nSign up for a free Apify account and deploy your code to the platform in just a few minutes! If you want a head start without coding it yourself, browse our Store of existing solutions.\n\n[Import your code](https://console.apify.com/actors/new)[Go to store](/store)\n\nProduct\n\n  * [Apify Store](/store)\n\n  * [Integrations](/integrations)\n\n  * [Proxy](/proxy)\n\n  * [Crawlee](https://crawlee.dev/)\n\n\n\n\nDevelopers\n\n  * [Documentation](https://docs.apify.com/)\n\n  * [Code templates](/templates)\n\n  * [Deploy to Apify](https://docs.apify.com/platform/actors/development/deployment)\n\n  * [API reference](https://docs.apify.com/api)\n\n  * [Get paid on Apify](/partners/actor-developers)\n\n\n\n\nConsulting\n\n  * [Professional Services](/professional-services)\n\n  * [Apify Partners](/partners)\n\n\n\n\nSupport\n\n  * [Help & Support](https://help.apify.com/en/)\n\n  * [Submit your ideas](/ideas)\n\n  * [Forum](https://discord.apify.com/)\n\n\n\n\nCompany\n\n  * [About Apify](/about)\n\n  * [Contact us](/contact)\n\n  * [Events](https://lu.ma/apify)\n\n  * [Blog](https://blog.apify.com/)\n\n  * [Become an affiliate](/partners/affiliate)\n\n  * [Customer stories](/success-stories)\n\n  * [Changelog](/change-log)\n\n  * [JobsWe're hiring!](/jobs)\n\n\n\n\n[](/)\n\nSocials\n\n  * [](https://www.linkedin.com/company/apifytech/)\n  * [](https://x.com/apify)\n  * [](https://github.com/apify)\n  * [](https://www.youtube.com/apify)\n  * [](https://discord.com/invite/jyEM2PRvMU)\n  * [](https://www.tiktok.com/@apifytech)\n\n\n\nSecurity\n\n  * [](https://docs.apify.com/legal/gdpr-information)\n  * [](https://trust.apify.com/)\n\n\n\nReviews\n\n  * [](https://www.getapp.com/business-intelligence-analytics-software/a/apify/)\n  * [](https://www.softwareadvice.com/data-extraction/apify-profile/)\n  * [](https://www.capterra.com/p/150854/Apify/)\n  * [](https://www.g2.com/products/apify/reviews)\n  * [](https://www.trustradius.com/products/apify/reviews)\n  * [](https://crozdesk.com/software/apify)\n\n\n\n[Loading status...](https://status.apify.com/)\n\n[Terms of Use](https://docs.apify.com/legal/general-terms-and-conditions)\n\n[Privacy Policy](https://docs.apify.com/legal/privacy-policy)\n\n[Cookie Policy](https://docs.apify.com/legal/cookie-policy)\n\nCookie settings\n\n© 2025 Apify\n"
}